/* tslint:disable */
/* eslint-disable */
/**
 * ipapi.co IP Geolocation API
 * This API provides IP address-based geolocation data, including city, region, country, latitude, longitude, and other related details.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Geolocation,
  JsonGet200Response,
} from '../models/index';
import {
    GeolocationFromJSON,
    GeolocationToJSON,
    JsonGet200ResponseFromJSON,
    JsonGet200ResponseToJSON,
} from '../models/index';

export interface IpJsonGetRequest {
    ip: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get geolocation data based on a provided IP address.
     * IP Geolocation Data for a specific IP
     */
    async ipJsonGetRaw(requestParameters: IpJsonGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Geolocation>> {
        if (requestParameters['ip'] == null) {
            throw new runtime.RequiredError(
                'ip',
                'Required parameter "ip" was null or undefined when calling ipJsonGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ip}/json`.replace(`{${"ip"}}`, encodeURIComponent(String(requestParameters['ip']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeolocationFromJSON(jsonValue));
    }

    /**
     * Get geolocation data based on a provided IP address.
     * IP Geolocation Data for a specific IP
     */
    async ipJsonGet(ip: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Geolocation> {
        const response = await this.ipJsonGetRaw({ ip: ip }, initOverrides);
        return await response.value();
    }

    /**
     * Get geolocation data based on the user\'s IP address or a provided IP address.
     * IP Geolocation Data
     */
    async jsonGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JsonGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get geolocation data based on the user\'s IP address or a provided IP address.
     * IP Geolocation Data
     */
    async jsonGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JsonGet200Response> {
        const response = await this.jsonGetRaw(initOverrides);
        return await response.value();
    }

}
