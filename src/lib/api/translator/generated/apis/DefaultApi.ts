/* tslint:disable */
/* eslint-disable */
/**
 * Translate Plus API
 * Our APIs allow developers to translate any text into more than 100 languages from Google Translate API. ðŸš€
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DetectLanguageModel,
  HTTPValidationError,
  TranslateModel,
} from '../models/index';
import {
    DetectLanguageModelFromJSON,
    DetectLanguageModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TranslateModelFromJSON,
    TranslateModelToJSON,
} from '../models/index';

export interface DetectLanguageDetectPostRequest {
    detectLanguageModel: DetectLanguageModel;
}

export interface TranslateTranslatePostRequest {
    translateModel: TranslateModel;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * This endpoint detects the Language from the text provided!
     * Detect
     */
    async detectLanguageDetectPostRaw(requestParameters: DetectLanguageDetectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['detectLanguageModel'] == null) {
            throw new runtime.RequiredError(
                'detectLanguageModel',
                'Required parameter "detectLanguageModel" was null or undefined when calling detectLanguageDetectPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/language_detect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DetectLanguageModelToJSON(requestParameters['detectLanguageModel']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This endpoint detects the Language from the text provided!
     * Detect
     */
    async detectLanguageDetectPost(detectLanguageModel: DetectLanguageModel, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.detectLanguageDetectPostRaw({ detectLanguageModel: detectLanguageModel }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will get list of Languages supported by our API.
     * Supported Languages
     */
    async supportedLanguagesSupportedLanguagesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/supported-languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This endpoint will get list of Languages supported by our API.
     * Supported Languages
     */
    async supportedLanguagesSupportedLanguagesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.supportedLanguagesSupportedLanguagesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint translate from source language to target language you have defined! and it is designed to handle very high-volume use keeping the cost lower.
     * Translate
     */
    async translateTranslatePostRaw(requestParameters: TranslateTranslatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['translateModel'] == null) {
            throw new runtime.RequiredError(
                'translateModel',
                'Required parameter "translateModel" was null or undefined when calling translateTranslatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/translate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslateModelToJSON(requestParameters['translateModel']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This endpoint translate from source language to target language you have defined! and it is designed to handle very high-volume use keeping the cost lower.
     * Translate
     */
    async translateTranslatePost(translateModel: TranslateModel, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.translateTranslatePostRaw({ translateModel: translateModel }, initOverrides);
        return await response.value();
    }

}
